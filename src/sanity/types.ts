/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SiteMetaData = {
  _id: string;
  _type: "siteMetaData";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteTitle?: string;
  siteDescription?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socialLinks?: Array<{
    platform?: string;
    url?: string;
    _key: string;
  }>;
  footerText?: string;
};

export type SonauiComponent = {
  _id: string;
  _type: "sonauiComponent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  pageLink?: string;
  status?: "inDevelopment" | "completed" | "deprecated";
  category?: "textEffect" | "basicComponent" | "magicComponent";
  tags?: "new" | "updated" | "soon";
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: string;
  userImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Slug
  | SiteMetaData
  | SonauiComponent
  | Testimonial
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: TESTIMONIALS_QUERY
// Query: *[_type == "testimonial"]{  _id,  user,  userImage {    asset->{      _id,      url    }  },  description}
export type TESTIMONIALS_QUERYResult = Array<{
  _id: string;
  user: string | null;
  userImage: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
  } | null;
  description: string | null;
}>;
// Variable: SONAUI_COMPONENTS_QUERY
// Query: *[_type == "sonauiComponent"] | order(name asc){    _id,    name,    pageLink,    status,    category,    tags  }
export type SONAUI_COMPONENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  pageLink: string | null;
  status: "completed" | "deprecated" | "inDevelopment" | null;
  category: "basicComponent" | "magicComponent" | "textEffect" | null;
  tags: "new" | "soon" | "updated" | null;
}>;
// Variable: SONAUI_BASIC_COMPONENTS_QUERY
// Query: *[_type == "sonauiComponent"  && category == "basicComponent"] | order(name asc){    _id,    name,    pageLink,    status,    category,    tags  }
export type SONAUI_BASIC_COMPONENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  pageLink: string | null;
  status: "completed" | "deprecated" | "inDevelopment" | null;
  category: "basicComponent" | "magicComponent" | "textEffect" | null;
  tags: "new" | "soon" | "updated" | null;
}>;
// Variable: SONAUI_MAGIC_COMPONENTS_QUERY
// Query: *[_type == "sonauiComponent"  && category == "magicComponent"] | order(name asc){    _id,    name,    pageLink,    status,    category,    tags  }
export type SONAUI_MAGIC_COMPONENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  pageLink: string | null;
  status: "completed" | "deprecated" | "inDevelopment" | null;
  category: "basicComponent" | "magicComponent" | "textEffect" | null;
  tags: "new" | "soon" | "updated" | null;
}>;
// Variable: SITE_METADATA_QUERY
// Query: *[_type == "siteMetaData"][0]{  siteTitle,  siteDescription,  "logoUrl": logo.asset->url,  "faviconUrl": favicon.asset->url,  socialLinks[]{    platform,    url  },}
export type SITE_METADATA_QUERYResult = {
  siteTitle: string | null;
  siteDescription: string | null;
  logoUrl: string | null;
  faviconUrl: string | null;
  socialLinks: Array<{
    platform: string | null;
    url: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "testimonial"]{\n  _id,\n  user,\n  userImage {\n    asset->{\n      _id,\n      url\n    }\n  },\n  description\n}': TESTIMONIALS_QUERYResult;
    '*[_type == "sonauiComponent"] | order(name asc){\n    _id,\n    name,\n    pageLink,\n    status,\n    category,\n    tags\n  }': SONAUI_COMPONENTS_QUERYResult;
    '*[_type == "sonauiComponent"  && category == "basicComponent"] | order(name asc){\n    _id,\n    name,\n    pageLink,\n    status,\n    category,\n    tags\n  }': SONAUI_BASIC_COMPONENTS_QUERYResult;
    '*[_type == "sonauiComponent"  && category == "magicComponent"] | order(name asc){\n    _id,\n    name,\n    pageLink,\n    status,\n    category,\n    tags\n  }': SONAUI_MAGIC_COMPONENTS_QUERYResult;
    '*[_type == "siteMetaData"][0]{\n  siteTitle,\n  siteDescription,\n  "logoUrl": logo.asset->url,\n  "faviconUrl": favicon.asset->url,\n  socialLinks[]{\n    platform,\n    url\n  },\n}': SITE_METADATA_QUERYResult;
  }
}
